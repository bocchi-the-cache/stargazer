openapi: 3.0.0
info:
  description: "Stargazer Backend OpenAPI Specification"
  version: 0.1.0
  title: "Stargazer"
  contact:
    email: "sptuan@steinslab.io"

tags:
  -   name: Task
      description: "Task management"
  -   name: Data
      description: "Data management"

paths:
  /task:
    get:
      tags:
        - Task
      summary: "Get all tasks"
      description: "Get all tasks"
      operationId: "getTasks"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
        400:
          description: "Invalid status value"
    post:
      tags:
        - Task
      summary: "Add a new task"
      description: "Add a new task"
      operationId: "addTask"
      requestBody:
        description: "Task object that needs to be added"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        400:
          description: "Invalid input"
  /task/{taskId}:
    get:
      tags:
        - Task
      summary: "Get task by ID"
      description: "Get task by ID"
      operationId: "getTaskById"
      parameters:
        -   name: "taskId"
            in: "path"
            description: "ID of task to return"
            required: true
            schema:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: "#/components/schemas/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    put:
      tags:
        - Task
      summary: "Update task by ID"
      description: "Update task by ID"
      operationId: "updateTaskById"
      parameters:
        -   name: "taskId"
            in: "path"
            description: "ID of task to update"
            required: true
            schema:
              type: "integer"
              format: "int64"
      requestBody:
        description: "Task object that needs to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    delete:
      tags:
        - Task
      summary: "Delete task by ID"
      description: "Delete task by ID"
      operationId: "deleteTaskById"
      parameters:
        -   name: "taskId"
            in: "path"
            description: "ID of task to delete"
            required: true
            schema:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"

  /data/{taskId}/series:
    get:
      tags:
        - Data
      summary: "Get data series by task ID"
      description: "Get data series by task ID"
      operationId: "getDataSeriesByTaskId"
      parameters:
        -   name: "taskId"
            in: "path"
            description: "ID of task to return"
            required: true
            schema:
              type: "integer"
              format: "int64"
        -   name: "interval"
            in: "query"
            description: "Interval of data series"
            required: false
            schema:
              type: "string"
              format: "string"
              enum:
                - "1m"
                - "5m"
                - "15m"
                - "30m"
                - "1h"
                - "6h"
                - "12h"
                - "1d"
        -   name: "start"
            in: "query"
            description: "Start time of data series"
            required: false
            schema:
              type: "integer"
              format: "int64"
        -   name: "end"
            in: "query"
            description: "End time of data series"
            required: false
            schema:
              type: "integer"
              format: "int64"

      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  series:
                    type: array
                    items:
                      $ref: "#/components/schemas/DataSeries"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"

  /data/{taskId}/status:
    get:
      tags:
        - Data
      summary: "Get data status by task ID"
      description: "Get data status by task ID"
      operationId: "getDataStatusByTaskId"
      parameters:
        -   name: "taskId"
            in: "path"
            description: "ID of task to return"
            required: true
            schema:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/DataStatus"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"

  /data/{taskId}/log:
    get:
      tags:
        - Data
      summary: "Get data log by task ID"
      description: "Get data log by task ID"
      operationId: "getDataLogByTaskId"
      parameters:
        -   name: "taskId"
            in: "path"
            description: "ID of task to return"
            required: true
            schema:
              type: "integer"
              format: "int64"
        -   name: "start"
            in: "query"
            description: "Start time of data log"
            required: false
            schema:
              type: "integer"
              format: "int64"
        -   name: "end"
            in: "query"
            description: "End time of data log"
            required: false
            schema:
              type: "integer"
              format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  log:
                    type: array
                    items:
                      $ref: "#/components/schemas/DataLog"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"


components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - "http"
            - "https"
            - "ping"
            - "port"
        target:
          type: string
          description: "url/ip:port"
        http_host:
          type: string
          description: "Overwrite target host (in http/https)"
        ssl_verify:
          type: boolean
          description: "Verify SSL certificate (in http/https)"
        ssl_expire:
          type: boolean
          description: "Check SSL certificate expiration soon (in http/https)"
        interval:
          type: integer
          format: int64
          description: "Interval in seconds"
        timeout:
          type: integer
          format: int64
          description: "Timeout in milliseconds"
        status:
          type: string
          enum:
            - "active"
            - "inactive"
        created_at:
          type: integer
          format: int64
        updated_at:
          type: integer
          format: int64
    DataSeries:
      type: object
      properties:
        time_start:
          type: integer
          format: int64
        time_end:
          type: integer
          format: int64
        value:
          type: number
          format: float
        message:
          type: string
    DataStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - "UP"
            - "DOWN"
            - "INACTIVE"
        last_run:
          type: integer
          format: int64
        next_run:
          type: integer
          format: int64
    DataLog:
      type: object
      properties:
        time:
          type: integer
          format: int64
        level:
          type: string
          enum:
            - "INFO"
            - "WARN"
            - "ERROR"